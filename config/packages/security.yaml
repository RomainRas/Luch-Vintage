security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers: #! https://symfony.com/doc/current/security.html#the-user (Register the User: Hashing Passwords)
    # Cryptage des mdp
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # hasher natif de symfony ( decrypt ) on pourrais specifier à symfony d'utiliser un autre que 'auto'. auto = decrypt
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
        # Nouveau fournisseur d'utilisateur
            entity:
                class: App\Entity\User #! https://symfony.com/doc/current/security.html#the-user (Loading the user Provider)
                # Qui correspond à l'entité(class) User
                property: email #! https://symfony.com/doc/current/security.html#the-user (Loading the user Provider)
                # Avec la proprieté d'identitification : email
    firewalls:
    # Verification de l'identité de l'utisateur, déclaration des pare-feux pour contrôler la sécurité des routes et actions de l'application
        dev:
        # Firewall pour l'environnement de développement
            pattern: ^/(_(profiler|wdt)|css|images|js)/ #! https://symfony.com/doc/current/security.html#the-user (The Firewall)
            # Ce pattern permet de matcher les URL qui commencent par `/_profiler`, `/_wdt` (les outils de debug Symfony), 
            # ainsi que les fichiers CSS, images et JavaScript.
            # Ces ressources ne nécessitent pas d'authentification.
            security: false #! https://symfony.com/doc/current/security.html#the-user (The Firewall)
            # La sécurité est désactivée pour ces routes car il n'est pas nécessaire de sécuriser
            # les fichiers statiques ou les outils de développement dans un environnement de développement.
        main:
            # https://symfony.com/doc/current/security.html#logging-out
            logout : 
                path: app_logout
            # https://symfony.com/doc/current/security.html#form-login
            form_login :
                login_path: app_login
                check_path: app_login
                # On autorise comme indiqué dans la docs les routes pour notre formulaire de connexion dans le firwall, dans le LoginController.php la route est app_login
                    # On dit a Symfony voici la route la route qui permet de loger un User et de voir si les ID sont correct
        # Firewall principal utilisé pour protéger la plupart des routes de l'application
            lazy: true #! https://symfony.com/doc/current/security.html#the-user (The Firewall)
            # Le mode "lazy" permet d'initialiser la session utilisateur seulement lorsque c'est nécessaire,
            # c'est une optimisation pour éviter de charger trop de ressources inutilement.
            provider: app_user_provider #! https://symfony.com/doc/current/security.html#the-user (The Firewall)
            # Ce paramètre indique la source des utilisateurs pour l'authentification.
            # Ici, "users_in_memory" fait référence à un fournisseur d'utilisateurs en mémoire (dans un fichier ou une configuration),
            # plutôt que dans une base de données. 

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
    # Declare un chemin/url ( pour acceder a l'url /admin il faut le roles ROLE_ADMIN)
        - { path: ^/compte, roles: ROLE_USER }
        - { path: ^/commande, roles: ROLE_USER }
        - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
